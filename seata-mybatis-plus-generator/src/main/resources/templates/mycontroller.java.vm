package ${package.Controller};

import java.util.Arrays;


import com.cly.gt.api.vo.Result;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;

/**
 * @Description: $!{table.comment}
 * @Author: ${author}
 * @Date: ${date}
 * @Version: V1.0
 */
@RestController
@RequestMapping("/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Slf4j
public class ${entity}Controller {

    @Autowired
    private ${table.serviceName}  ${table.entityPath}Service;
    /**
     * 分页列表查询
     * @param pageNo
     * @param pageSize
     * @return
     */
    @GetMapping(value = "/list")
    public Result<IPage<${entity}>> queryPageList(@RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
                                                  @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize) {
        Result<IPage<${entity}>> result = new Result<IPage<${entity}>>();
        QueryWrapper<${entity}> queryWrapper = new QueryWrapper();
        Page<${entity}> page = new Page<${entity}>(pageNo, pageSize);
        IPage<${entity}> pageList = ${table.entityPath}Service.page(page, queryWrapper);
        result.setSuccess(true);
        result.setResult(pageList);
        return result;
    }

    /**
     *   添加
     * @param ${table.entityPath}
     * @return
     */
    @PostMapping(value = "/add")
    public Result<${entity}> add(@Validated @RequestBody ${entity} ${table.entityPath}) {
        Result<${entity}> result = new Result<${entity}>();
        try {
                ${table.entityPath}Service.save(${table.entityPath});
            result.success("添加成功！");
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            result.error500("操作失败");
        }
        return result;
    }

    /**
     *  编辑
     * @param ${table.entityPath}Dto
     * @return
     */
    @PutMapping(value = "/edit")
    public Result<${entity}> edit(@Validated @RequestBody ${entity} ${table.entityPath}Dto) {
        Result<${entity}> result = new Result<${entity}>();
        ${entity} ${table.entityPath} =${table.entityPath}Service.getById(${table.entityPath}Dto.getId());
        if (${table.entityPath}==null){
            result.error500("未找到对应实体");
        }else{
            boolean ok = ${table.entityPath}Service.updateById(${table.entityPath}Dto);
            //TODO 返回false说明什么？
            if (ok) {
                result.success("修改成功!");
            }
        }

        return result;
    }

    /**
	  *   通过id删除
	 * @param id
	 * @return
	 */
    @DeleteMapping(value = "/delete")
    public Result<?> delete(@RequestParam(name = "id", required = true) String id) {
        try {
                ${table.entityPath}Service.removeById(id);
        } catch (Exception e) {
            log.error("删除失败", e.getMessage());
            return Result.error("删除失败!");
        }
        return Result.ok("删除成功!");
    }

    /**
	  *  批量删除
	 * @param ids
	 * @return
	 */
    @DeleteMapping(value = "/deleteBatch")
    public Result<${entity}> deleteBatch(@RequestParam(name = "ids", required = true) String ids) {
        Result<${entity}> result = new Result<${entity}>();
        if (ids == null || "".equals(ids.trim())) {
            result.error500("参数不识别！");
        } else {
                ${table.entityPath}Service.removeByIds(Arrays.asList(ids.split(",")));
            result.success("删除成功!");
        }
        return result;
    }

    /**
	  * 通过id查询
	 * @param id
	 * @return
	 */
    @GetMapping(value = "/queryById")
    public Result<${entity}> queryById(@RequestParam(name = "id", required = true) String id) {
        Result<${entity}> result = new Result<${entity}>();
        ${entity} ${table.entityPath} =${table.entityPath}Service.getById(id);
        if (${table.entityPath}==null){
            result.error500("未找到对应实体");
        }else{
            result.setResult(${table.entityPath});
            result.setSuccess(true);
        }
        return result;
    }
}
